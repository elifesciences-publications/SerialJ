/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package serialj;

import java.awt.Desktop;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.FileHandler;
import java.util.logging.Handler;
import java.util.logging.Level;
import java.util.logging.LogRecord;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.imageio.ImageIO;
import jssc.SerialPortList;

/**
 *
 * @author Xiaoxing
 */
public class UI extends javax.swing.JFrame {

    final private String[] portNames;
    private LogUpdator u;
    private PortReader p;
    private String statusFilePath;
    final private String ver = "ZX Serial 1.22b";
    private String statusFileParent = "E:\\ZXX\\StatusServer\\";
    private String savePath = "E:\\ZXX\\2014\\";
    final private String[] expLists;

    /**
     * Creates new form UI
     */
    public UI() {

        try {
            initLogger();
            this.setIconImage(ImageIO.read(getClass().getResource("/rsrc/icon.png")));
        } catch (IOException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        portNames = SerialPortList.getPortNames();
        u = new LogUpdator();
        FileLib flib = new FileLib();
        String s = flib.readPath("[BroadcastPath]");
        if (s != null) {
            statusFileParent = s;
        }
        String sp = flib.readPath("[SavePath]");
        if (sp != null) {
            savePath = sp;
        }
        expLists = flib.getExperimentConditions();
        initComponents();
    }

    private void initLogger() throws IOException {
        Logger rootLogger = Logger.getLogger("");
        rootLogger.setLevel(Level.FINE);
        Handler fh = new FileHandler("errors.log", true);
        fh.setFilter((LogRecord record) -> record.getLevel().intValue() > 700 || record.getMessage().contains("Exception"));
        fh.setFormatter(new SimpleFormatter());
        rootLogger.addHandler(fh);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        cboxCOMList = new javax.swing.JComboBox();
        btnRecord = new javax.swing.JButton();
        btnStop = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtLog = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtFileName = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtPerf = new javax.swing.JTextArea();
        txtCurrSta = new javax.swing.JTextField();
        btnOpen = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnDate = new javax.swing.JButton();
        btnType = new javax.swing.JButton();
        btnSlash = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(ver);

        jPanel1.setPreferredSize(new java.awt.Dimension(335, 320));

        cboxCOMList.setModel(new javax.swing.DefaultComboBoxModel(portNames));

        btnRecord.setText("|>");
        btnRecord.setPreferredSize(new java.awt.Dimension(45, 20));
        btnRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecordActionPerformed(evt);
            }
        });

        btnStop.setText("[]");
        btnStop.setEnabled(false);
        btnStop.setMaximumSize(new java.awt.Dimension(45, 23));
        btnStop.setMinimumSize(new java.awt.Dimension(45, 23));
        btnStop.setPreferredSize(new java.awt.Dimension(45, 20));
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });

        txtLog.setEditable(false);
        txtLog.setColumns(12);
        txtLog.setRows(5);
        jScrollPane1.setViewportView(txtLog);

        txtFileName.setColumns(20);
        txtFileName.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        txtFileName.setLineWrap(true);
        txtFileName.setRows(2);
        txtFileName.setText(savePath);
        jScrollPane2.setViewportView(txtFileName);

        txtPerf.setEditable(false);
        txtPerf.setColumns(12);
        txtPerf.setRows(5);
        jScrollPane3.setViewportView(txtPerf);

        txtCurrSta.setEditable(false);

        btnOpen.setText("Open");
        btnOpen.setMaximumSize(new java.awt.Dimension(70, 23));
        btnOpen.setMinimumSize(new java.awt.Dimension(70, 23));
        btnOpen.setPreferredSize(new java.awt.Dimension(66, 20));
        btnOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.setEnabled(false);
        btnClear.setMaximumSize(new java.awt.Dimension(70, 23));
        btnClear.setMinimumSize(new java.awt.Dimension(70, 23));
        btnClear.setPreferredSize(new java.awt.Dimension(66, 20));
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnDate.setText("Date");
        btnDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDateActionPerformed(evt);
            }
        });

        btnType.setText("Type");
        btnType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTypeActionPerformed(evt);
            }
        });

        btnSlash.setText("\\");
            btnSlash.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnSlashActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
            jPanel1.setLayout(jPanel1Layout);
            jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(cboxCOMList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnRecord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnStop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btnOpen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(btnDate, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnSlash)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnType)))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane3)
                        .addComponent(txtCurrSta, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane1))
                .addComponent(jScrollPane2)
            );
            jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnClear, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnOpen, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnStop, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnRecord, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cboxCOMList, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnType, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnSlash, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnDate, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtCurrSta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1))
                    .addGap(4, 4, 4))
            );

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                    .addGap(0, 0, 0))
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void btnRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecordActionPerformed
        p = new PortReader(portNames[cboxCOMList.getSelectedIndex()]);
        p.setUpdater(u);
        if (p.setFileToPath(txtFileName.getText()) && p.start()) {
            btnRecord.setEnabled(false);
            txtFileName.setEditable(false);
            btnStop.setEnabled(true);
            btnClear.setEnabled(false);
            btnDate.setEnabled(false);
            btnType.setEnabled(false);
            btnSlash.setEnabled(false);
            String comPort = portNames[cboxCOMList.getSelectedIndex()];
            this.setTitle(comPort + " " + ver);
            this.statusFilePath = statusFileParent + comPort + "Status.txt";
        }
    }//GEN-LAST:event_btnRecordActionPerformed

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        p.stop();
        btnRecord.setEnabled(true);
        btnStop.setEnabled(false);
        btnDate.setEnabled(true);
        btnType.setEnabled(true);
        btnClear.setEnabled(true);
        txtFileName.setEditable(true);
        btnSlash.setEnabled(true);
        this.setTitle(portNames[cboxCOMList.getSelectedIndex()] + " " + ver);
    }//GEN-LAST:event_btnStopActionPerformed

    private void btnOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenActionPerformed
        File f = new File(txtFileName.getText());
        if (f.exists()) {
            try {
                Desktop.getDesktop().open(new File(f.getParent()));
            } catch (IOException ex) {
                Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            txtLog.append("File does not exist.\r\n");
        }
    }//GEN-LAST:event_btnOpenActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        u = new LogUpdator();
        txtCurrSta.setText("");
        txtLog.setText("");
        txtPerf.setText("");
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDateActionPerformed
//        Calendar cal = Calendar.getInstance();
//        txtFileName.append("_" + cal.get(Calendar.YEAR) + "_" + cal.get(Calendar.MONTH) + "_" + cal.get(Calendar.DATE) + "_");
        SimpleDateFormat fmt = new SimpleDateFormat("_yyyy_MM_dd_");
        txtFileName.append(fmt.format(new Date()));
    }//GEN-LAST:event_btnDateActionPerformed

    private void btnTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTypeActionPerformed
        (new ExperimentsForm(expLists,txtFileName)).setVisible(true);
    }//GEN-LAST:event_btnTypeActionPerformed

    private void btnSlashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSlashActionPerformed
        txtFileName.append("\\");
    }//GEN-LAST:event_btnSlashActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new UI().setVisible(true);
        });
    }

    public class LogUpdator {

//        final private List<String> logList;
        final private String[] logs;
        final private ArrayList<int[]> perfHist;
        final private String[] hName;
        final private boolean update;
        private int[] currSta;//
        private int logIdx;

        public LogUpdator() {
//            logList = new ArrayList<>();
            logs = new String[20];
            for (int i = 0; i < 20; i++) {
                logs[i] = "";
            }
            logIdx = 0;
            perfHist = new ArrayList<>();
            hName = eventNames.init();
            currSta = new int[4];//Hit,Miss,False,Reject
            update = (new File(statusFileParent)).exists();

        }

        private void updatePerf() {
            if (currSta[0] + currSta[1] + currSta[2] + currSta[3] != 0) {
                perfHist.add(currSta);
                String perf = "";
                for (int i = perfHist.size(); i > 0; i--) {
                    perf += "S" + String.format("%2d", i) + ",";
                    int idx = i - 1;
                    int[] histSta = perfHist.get(idx);
                    int performance = (histSta[0] + histSta[3]) * 100
                            / (histSta[0] + histSta[1] + histSta[2] + histSta[3]);

                    perf += "P" + String.format("%3d", performance) + ",";
                    perf += "H" + String.format("%2d", histSta[0]) + ",";
                    perf += "M" + String.format("%2d", histSta[1]) + ",";
                    perf += "F" + String.format("%2d", histSta[2]) + ",";
                    perf += "C" + String.format("%2d", histSta[3]) + "\r\n";
                }
                txtPerf.setText(perf);
                if (update) {
                    try (BufferedWriter bw = new BufferedWriter(new FileWriter(statusFilePath))) {
                        bw.write(perf);
                    } catch (IOException ex) {
                        Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                currSta = new int[4];
            }
        }

        private void updateCurrSta() {
            String currStaStr = "";
            currStaStr += "H" + String.format("%2d", currSta[0]) + "  ";
            currStaStr += "M" + String.format("%2d", currSta[1]) + "  ";
            currStaStr += "F" + String.format("%2d", currSta[2]) + "  ";
            currStaStr += "C" + String.format("%2d", currSta[3]);
            txtCurrSta.setText(currStaStr);
        }

        public void updateEvent(int[] event) {
            updateString(evt2Str(event));
            switch (event[2]) {
                case 61:
                    if (event[3] == 0) {
                        updatePerf();
                    }
                    break;
                case 1:
                    if (event[1] == 0 && event[3] == 2 && event[4] == 3) {
                        updatePerf();
                    }
                    break;
                case 4:
                    currSta[2]++;//false
                    updateCurrSta();
                    break;
                case 5:
                    currSta[3]++;//reject
                    updateCurrSta();
                    break;
                case 6:
                    currSta[1]++;//Miss
                    updateCurrSta();
                    break;
                case 7:
                    currSta[0]++;
                    updateCurrSta();
                    break;
            }
        }

        public void updateString(String str) {
            logs[logIdx] = str;
            String status = "";
            int updateIdx = logIdx;
            for (int count = 0; count < 20; count++) {
                status += logs[updateIdx] + "\r\n";
                updateIdx = updateIdx > 0 ? updateIdx - 1 : 19;
            }
            txtLog.setText(status.trim());
            logIdx = logIdx < 19 ? logIdx + 1 : 0;
        }

        private String evt2Str(int[] evt) {
            switch (evt[1]) {
                case 0x55:
                    return Integer.toString(evt[0]) + "," + hName[evt[2]] + "," + Integer.toString(evt[3]);
                case 0x00:
                    if (evt[2] == 0x01 && evt[3] == 0x02 && evt[4] == 0x03) {
                        return Integer.toString(evt[0]) + ", Manual Reset";
                    }
                case 0xff:
                    return Integer.toString(evt[0]) + ", Communication Error";
                default:
                    return "unknown";
            }
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDate;
    private javax.swing.JButton btnOpen;
    private javax.swing.JButton btnRecord;
    private javax.swing.JButton btnSlash;
    private javax.swing.JButton btnStop;
    private javax.swing.JButton btnType;
    private javax.swing.JComboBox cboxCOMList;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField txtCurrSta;
    private javax.swing.JTextArea txtFileName;
    private javax.swing.JTextArea txtLog;
    private javax.swing.JTextArea txtPerf;
    // End of variables declaration//GEN-END:variables

}
