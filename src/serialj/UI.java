/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package serialj;

import java.awt.Color;
import java.awt.Desktop;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.logging.FileHandler;
import java.util.logging.Handler;
import java.util.logging.Level;
import java.util.logging.LogRecord;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.imageio.ImageIO;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;
import jssc.SerialPortList;

/**
 *
 * @author Xiaoxing
 */
public class UI extends javax.swing.JFrame {

    final private String[] portNames;
    private LogUpdator u;
    private PortAccessor p;
    private String statusFilePath;
    final private String ver = "ZX Serial 1.80 @" + getPID();
    private String statusFileParent = "E:\\ZXX\\StatusServer\\";
    private String savePath = "E:\\ZXX\\2014\\";
    final private String[] expLists;

    /**
     * Creates new form UI
     */
    public UI() {
        try {
            URL iconUrl = getClass().getResource("/rsrc/icon.png");
            this.setIconImage(ImageIO.read(iconUrl));
            initLogger();
        } catch (IOException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        portNames = SerialPortList.getPortNames();
        FileLib flib = new FileLib();
        String s = flib.readPath("[BroadcastPath]");
        if (s != null) {
            statusFileParent = s;
        }
        String sp = flib.readPath("[SavePath]");
        if (sp != null) {
            savePath = sp;
        }
        u = new LogUpdator();
        expLists = flib.getExperimentConditions();
        initComponents();

        btnEnableGrp = new JComponent[]{jButton0, jButton1, jButton2, jButton3, jButton4, jButton5,
            jButton6, jButton7, jButton8, jButton9, btnStop, jButtonReset, btnScript};
        btnDisableGrp = new JComponent[]{btnRecord, txtFileName, btnClear, btnDate, btnType, btnSlash};
        txtFileName.setEditable(true);
        ses = new ScheduledThreadPoolExecutor(1);
    }

    private void initLogger() throws IOException {
        Logger rootLogger = Logger.getLogger("");
        rootLogger.setLevel(Level.FINE);
        Handler fh = new FileHandler("errors.log", true);
        fh.setFilter((LogRecord record) -> record.getLevel().intValue() > 700 || record.getMessage().contains("Exception"));
        fh.setFormatter(new SimpleFormatter());
        rootLogger.addHandler(fh);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        TopPanel = new javax.swing.JPanel();
        cboxCOMList = new javax.swing.JComboBox();
        btnRecord = new javax.swing.JButton();
        btnStop = new javax.swing.JButton();
        btnOpen = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        jScrollFilePath = new javax.swing.JScrollPane();
        txtFileName = new javax.swing.JTextArea();
        lblEmpty = new javax.swing.JLabel();
        LBPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtPerf = new javax.swing.JTextArea();
        btnDate = new javax.swing.JButton();
        btnType = new javax.swing.JButton();
        btnSlash = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtCurrPref = new javax.swing.JTextArea();
        jTxtPermText = new javax.swing.JTextField();
        RBPanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButtonReset = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton0 = new javax.swing.JButton();
        jScrollTxtLog = new javax.swing.JScrollPane();
        txtLog = new javax.swing.JTextArea();
        jTxtLickFreq = new javax.swing.JTextField();
        jButtonClearLickFreq = new javax.swing.JButton();
        btnScript = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(ver);
        setMaximumSize(new java.awt.Dimension(512, 2147483647));
        setMinimumSize(new java.awt.Dimension(300, 240));
        setPreferredSize(new java.awt.Dimension(375, 340));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        TopPanel.setMinimumSize(new java.awt.Dimension(350, 75));
        TopPanel.setPreferredSize(new java.awt.Dimension(350, 75));
        TopPanel.setLayout(new java.awt.GridBagLayout());

        cboxCOMList.setModel(new javax.swing.DefaultComboBoxModel(portNames));
        cboxCOMList.setMinimumSize(new java.awt.Dimension(70, 24));
        cboxCOMList.setPreferredSize(new java.awt.Dimension(70, 24));
        cboxCOMList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboxCOMListActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.03;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        TopPanel.add(cboxCOMList, gridBagConstraints);

        btnRecord.setText("|>");
        btnRecord.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnRecord.setMaximumSize(new java.awt.Dimension(32767, 32767));
        btnRecord.setMinimumSize(new java.awt.Dimension(55, 24));
        btnRecord.setPreferredSize(new java.awt.Dimension(55, 24));
        btnRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecordActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.03;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        TopPanel.add(btnRecord, gridBagConstraints);

        btnStop.setText("[]");
        btnStop.setEnabled(false);
        btnStop.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnStop.setMaximumSize(new java.awt.Dimension(32767, 32767));
        btnStop.setMinimumSize(new java.awt.Dimension(55, 24));
        btnStop.setPreferredSize(new java.awt.Dimension(55, 24));
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.03;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        TopPanel.add(btnStop, gridBagConstraints);

        btnOpen.setText("Open");
        btnOpen.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnOpen.setMaximumSize(new java.awt.Dimension(32767, 32767));
        btnOpen.setMinimumSize(new java.awt.Dimension(55, 24));
        btnOpen.setPreferredSize(new java.awt.Dimension(55, 24));
        btnOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.03;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        TopPanel.add(btnOpen, gridBagConstraints);

        btnClear.setText("Clear");
        btnClear.setEnabled(false);
        btnClear.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnClear.setMaximumSize(new java.awt.Dimension(32767, 32767));
        btnClear.setMinimumSize(new java.awt.Dimension(55, 24));
        btnClear.setPreferredSize(new java.awt.Dimension(55, 24));
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.03;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        TopPanel.add(btnClear, gridBagConstraints);

        jScrollFilePath.setMinimumSize(new java.awt.Dimension(200, 48));
        jScrollFilePath.setPreferredSize(new java.awt.Dimension(370, 60));

        txtFileName.setColumns(20);
        txtFileName.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        txtFileName.setLineWrap(true);
        txtFileName.setRows(2);
        txtFileName.setText(savePath);
        txtFileName.setMinimumSize(new java.awt.Dimension(200, 60));
        txtFileName.setPreferredSize(null);
        jScrollFilePath.setViewportView(txtFileName);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        TopPanel.add(jScrollFilePath, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        TopPanel.add(lblEmpty, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        getContentPane().add(TopPanel, gridBagConstraints);

        LBPanel.setMinimumSize(new java.awt.Dimension(100, 100));
        LBPanel.setPreferredSize(new java.awt.Dimension(190, 240));
        LBPanel.setLayout(new java.awt.GridBagLayout());

        jScrollPane3.setMinimumSize(new java.awt.Dimension(100, 100));
        jScrollPane3.setPreferredSize(new java.awt.Dimension(100, 145));

        txtPerf.setEditable(false);
        txtPerf.setColumns(12);
        txtPerf.setRows(5);
        jScrollPane3.setViewportView(txtPerf);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        LBPanel.add(jScrollPane3, gridBagConstraints);

        btnDate.setText("Date");
        btnDate.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnDate.setMaximumSize(new java.awt.Dimension(32767, 32767));
        btnDate.setMinimumSize(new java.awt.Dimension(40, 24));
        btnDate.setPreferredSize(new java.awt.Dimension(50, 24));
        btnDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDateActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        LBPanel.add(btnDate, gridBagConstraints);

        btnType.setText("Type");
        btnType.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnType.setMaximumSize(new java.awt.Dimension(32767, 32767));
        btnType.setMinimumSize(new java.awt.Dimension(40, 24));
        btnType.setPreferredSize(new java.awt.Dimension(50, 24));
        btnType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTypeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        LBPanel.add(btnType, gridBagConstraints);

        btnSlash.setText(File.separator);
        btnSlash.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnSlash.setMaximumSize(new java.awt.Dimension(32767, 32767));
        btnSlash.setMinimumSize(new java.awt.Dimension(40, 24));
        btnSlash.setPreferredSize(new java.awt.Dimension(50, 24));
        btnSlash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSlashActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        LBPanel.add(btnSlash, gridBagConstraints);

        jScrollPane4.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane4.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane4.setMinimumSize(new java.awt.Dimension(100, 45));
        jScrollPane4.setPreferredSize(new java.awt.Dimension(150, 45));

        txtCurrPref.setEditable(false);
        txtCurrPref.setColumns(20);
        txtCurrPref.setRows(2);
        txtCurrPref.setMinimumSize(null);
        txtCurrPref.setPreferredSize(null);
        jScrollPane4.setViewportView(txtCurrPref);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        LBPanel.add(jScrollPane4, gridBagConstraints);

        jTxtPermText.setEditable(false);
        jTxtPermText.setBackground(new java.awt.Color(255, 255, 255));
        jTxtPermText.setMinimumSize(new java.awt.Dimension(100, 24));
        jTxtPermText.setPreferredSize(new java.awt.Dimension(150, 24));
        jTxtPermText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTxtPermTextActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        LBPanel.add(jTxtPermText, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.weightx = 0.45;
        gridBagConstraints.weighty = 0.9;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        getContentPane().add(LBPanel, gridBagConstraints);

        RBPanel.setMinimumSize(new java.awt.Dimension(100, 100));
        RBPanel.setPreferredSize(new java.awt.Dimension(180, 240));
        RBPanel.setLayout(new java.awt.GridBagLayout());

        jButton1.setText("1");
        jButton1.setEnabled(false);
        jButton1.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButton1.setMaximumSize(new java.awt.Dimension(15, 24));
        jButton1.setMinimumSize(new java.awt.Dimension(15, 24));
        jButton1.setPreferredSize(new java.awt.Dimension(15, 24));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.05;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        RBPanel.add(jButton1, gridBagConstraints);

        jButton2.setText("2");
        jButton2.setEnabled(false);
        jButton2.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButton2.setMaximumSize(new java.awt.Dimension(15, 24));
        jButton2.setMinimumSize(new java.awt.Dimension(15, 24));
        jButton2.setPreferredSize(new java.awt.Dimension(15, 24));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.05;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        RBPanel.add(jButton2, gridBagConstraints);

        jButton3.setText("3");
        jButton3.setEnabled(false);
        jButton3.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButton3.setMaximumSize(new java.awt.Dimension(15, 24));
        jButton3.setMinimumSize(new java.awt.Dimension(15, 24));
        jButton3.setPreferredSize(new java.awt.Dimension(15, 24));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.05;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        RBPanel.add(jButton3, gridBagConstraints);

        jButton4.setText("4");
        jButton4.setEnabled(false);
        jButton4.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButton4.setMaximumSize(new java.awt.Dimension(15, 24));
        jButton4.setMinimumSize(new java.awt.Dimension(15, 24));
        jButton4.setPreferredSize(new java.awt.Dimension(15, 24));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.05;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        RBPanel.add(jButton4, gridBagConstraints);

        jButton5.setText("5");
        jButton5.setEnabled(false);
        jButton5.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButton5.setMaximumSize(new java.awt.Dimension(15, 24));
        jButton5.setMinimumSize(new java.awt.Dimension(15, 24));
        jButton5.setPreferredSize(new java.awt.Dimension(15, 24));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.05;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        RBPanel.add(jButton5, gridBagConstraints);

        jButtonReset.setText("RESET");
        jButtonReset.setEnabled(false);
        jButtonReset.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonReset.setMaximumSize(new java.awt.Dimension(32767, 32767));
        jButtonReset.setMinimumSize(new java.awt.Dimension(40, 24));
        jButtonReset.setPreferredSize(new java.awt.Dimension(55, 24));
        jButtonReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonResetActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.05;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        RBPanel.add(jButtonReset, gridBagConstraints);

        jButton6.setText("6");
        jButton6.setEnabled(false);
        jButton6.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButton6.setMaximumSize(new java.awt.Dimension(15, 24));
        jButton6.setMinimumSize(new java.awt.Dimension(15, 24));
        jButton6.setPreferredSize(new java.awt.Dimension(15, 24));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.05;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        RBPanel.add(jButton6, gridBagConstraints);

        jButton7.setText("7");
        jButton7.setEnabled(false);
        jButton7.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButton7.setMaximumSize(new java.awt.Dimension(15, 24));
        jButton7.setMinimumSize(new java.awt.Dimension(15, 24));
        jButton7.setPreferredSize(new java.awt.Dimension(15, 24));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.05;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        RBPanel.add(jButton7, gridBagConstraints);

        jButton8.setText("8");
        jButton8.setEnabled(false);
        jButton8.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButton8.setMaximumSize(new java.awt.Dimension(15, 24));
        jButton8.setMinimumSize(new java.awt.Dimension(15, 24));
        jButton8.setPreferredSize(new java.awt.Dimension(15, 24));
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.05;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        RBPanel.add(jButton8, gridBagConstraints);

        jButton9.setText("9");
        jButton9.setEnabled(false);
        jButton9.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButton9.setMaximumSize(new java.awt.Dimension(15, 24));
        jButton9.setMinimumSize(new java.awt.Dimension(15, 24));
        jButton9.setPreferredSize(new java.awt.Dimension(15, 24));
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.05;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        RBPanel.add(jButton9, gridBagConstraints);

        jButton0.setText("0");
        jButton0.setEnabled(false);
        jButton0.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButton0.setMaximumSize(new java.awt.Dimension(15, 24));
        jButton0.setMinimumSize(new java.awt.Dimension(15, 24));
        jButton0.setPreferredSize(new java.awt.Dimension(15, 24));
        jButton0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton0ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.05;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        RBPanel.add(jButton0, gridBagConstraints);

        jScrollTxtLog.setMinimumSize(new java.awt.Dimension(100, 200));
        jScrollTxtLog.setPreferredSize(new java.awt.Dimension(100, 200));

        txtLog.setEditable(false);
        txtLog.setColumns(12);
        txtLog.setRows(5);
        txtLog.setPreferredSize(null);
        jScrollTxtLog.setViewportView(txtLog);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        RBPanel.add(jScrollTxtLog, gridBagConstraints);

        jTxtLickFreq.setEditable(false);
        jTxtLickFreq.setBackground(new java.awt.Color(255, 255, 255));
        jTxtLickFreq.setMaximumSize(new java.awt.Dimension(32767, 32767));
        jTxtLickFreq.setMinimumSize(new java.awt.Dimension(100, 24));
        jTxtLickFreq.setPreferredSize(new java.awt.Dimension(135, 24));
        jTxtLickFreq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTxtLickFreqActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.25;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        RBPanel.add(jTxtLickFreq, gridBagConstraints);

        jButtonClearLickFreq.setText("C");
        jButtonClearLickFreq.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jButtonClearLickFreq.setMaximumSize(new java.awt.Dimension(32767, 32767));
        jButtonClearLickFreq.setMinimumSize(new java.awt.Dimension(40, 24));
        jButtonClearLickFreq.setPreferredSize(new java.awt.Dimension(55, 24));
        jButtonClearLickFreq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearLickFreqActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        RBPanel.add(jButtonClearLickFreq, gridBagConstraints);

        btnScript.setText("Script");
        btnScript.setEnabled(false);
        btnScript.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnScript.setMaximumSize(new java.awt.Dimension(32767, 32767));
        btnScript.setMinimumSize(new java.awt.Dimension(40, 24));
        btnScript.setPreferredSize(new java.awt.Dimension(55, 24));
        btnScript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnScriptActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.05;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        RBPanel.add(btnScript, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.weightx = 0.55;
        gridBagConstraints.weighty = 0.9;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        getContentPane().add(RBPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTxtPermTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTxtPermTextActionPerformed

    }//GEN-LAST:event_jTxtPermTextActionPerformed

    private void jButton0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton0ActionPerformed
        p.writeByte((byte) 0x30);
    }//GEN-LAST:event_jButton0ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        p.writeByte((byte) 0x39);
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        p.writeByte((byte) 0x38);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        p.writeByte((byte) 0x37);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        p.writeByte((byte) 0x36);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButtonResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResetActionPerformed
        p.writeByte((byte) 0x2a);
    }//GEN-LAST:event_jButtonResetActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        p.writeByte((byte) 0x35);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        p.writeByte((byte) 0x34);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        p.writeByte((byte) 0x33);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        p.writeByte((byte) 0x32);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        p.writeByte((byte) 0x31);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnSlashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSlashActionPerformed
        txtFileName.append(File.separator);
    }//GEN-LAST:event_btnSlashActionPerformed

    private void btnTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTypeActionPerformed
        (new ExperimentsForm(expLists, txtFileName)).setVisible(true);
    }//GEN-LAST:event_btnTypeActionPerformed

    private void btnDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDateActionPerformed
        SimpleDateFormat fmt = new SimpleDateFormat("_yyyy_MM_dd_");
        txtFileName.append(fmt.format(new Date()));
    }//GEN-LAST:event_btnDateActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        u = new LogUpdator();
        txtCurrPref.setText("");
        txtLog.setText("");
        txtPerf.setText("");
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenActionPerformed
        File f = new File(txtFileName.getText());
        if (f.exists()) {
            try {
                Desktop.getDesktop().open(new File(f.getParent()));
            } catch (IOException ex) {
                Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            txtLog.append("File does not exist.\r\n");
        }
    }//GEN-LAST:event_btnOpenActionPerformed

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        p.stop();
        u.updatePerf();
        if (null != redBgTimerTask && !redBgTimerTask.isCancelled()) {
            redBgTimerTask.cancel(true);
        }
        LBPanel.setBackground((new Color(240, 240, 240)));
        for (JComponent jc : btnDisableGrp) {
            jc.setEnabled(true);
        }
        for (JComponent jc : btnEnableGrp) {
            jc.setEnabled(false);
        }
        this.setTitle(portNames[cboxCOMList.getSelectedIndex()] + " " + ver);

    }//GEN-LAST:event_btnStopActionPerformed

    private void btnRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecordActionPerformed
        if (cboxCOMList.getSelectedIndex() < 0) {
            return;
        }

        p = new PortAccessor(portNames[cboxCOMList.getSelectedIndex()]);
        p.setUpdater(u);
        if (p.setFileToPath(txtFileName.getText()) && p.start()) {
            for (JComponent jc : btnDisableGrp) {
                jc.setEnabled(false);
            }
            for (JComponent jc : btnEnableGrp) {
                jc.setEnabled(true);
            }
            String comPort = portNames[cboxCOMList.getSelectedIndex()];
            this.setTitle(comPort + " " + ver);
            this.statusFilePath = statusFileParent + comPort + "Status.txt";

            redBgTimerTask = ses.scheduleWithFixedDelay((new Alarm()), 60, 60, TimeUnit.SECONDS);
        }
    }//GEN-LAST:event_btnRecordActionPerformed

    private void cboxCOMListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboxCOMListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboxCOMListActionPerformed

    private void jTxtLickFreqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTxtLickFreqActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTxtLickFreqActionPerformed

    private void jButtonClearLickFreqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearLickFreqActionPerformed
        u.clearFreq();
    }//GEN-LAST:event_jButtonClearLickFreqActionPerformed

    private void btnScriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnScriptActionPerformed
        if (btnScript.isSelected()) {
            JFileChooser fc = new JFileChooser();
            int result = fc.showOpenDialog(this);
            if (result == JFileChooser.APPROVE_OPTION) {
                File f = fc.getSelectedFile();
                u.updateString("Running Script " + f.getName());
                se = new ScriptExecutor(f, p);
                (new Thread(se)).start();
            }
        } else {
            se.stop();
            u.updateString("Script stopped");
        }
    }//GEN-LAST:event_btnScriptActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new UI().setVisible(true);
        });
    }

    public class LogUpdator {

        final private ArrayList<int[][]> perfHist;
        final private String[] hName;
        final private boolean update;
        final private StringBuilder logTxt;
        private int[][] currSta;
        private int lFreq = 0;
        private int lFreqMax = 0;
        private int rFreq = 0;
        private int rFreqMax = 0;
        private final StringBuilder freqText;
        private int lickCountFlag = 0;
        private int lickCountTimeCount;
        private int[] lickCount = new int[4];

        public LogUpdator() {
            logTxt = new StringBuilder();
            logTxt.ensureCapacity(500);
            perfHist = new ArrayList<>();
            hName = eventNames.init();
            currSta = new int[2][4];//Hit,Miss,False,Reject
            update = (new File(statusFileParent)).exists();
            freqText = new StringBuilder();
        }

        public void updatePerf() {
            Arrays.stream(currSta[0]).sum();
            if (Arrays.stream(currSta[0]).sum() + Arrays.stream(currSta[1]).sum() > 0) {
                perfHist.add(currSta);
                final StringBuilder perf = new StringBuilder();
                for (int i = 0; i < perfHist.size(); i++) {
                    perf.append("S").append(String.format("%2d", i + 1)).append(",");
                    int[][] histSta = perfHist.get(i);
                    int performance = (histSta[0][0] + histSta[0][3] + histSta[1][0] + histSta[1][3]) * 100
                            / (Arrays.stream(histSta[0]).sum() + Arrays.stream(histSta[1]).sum());

                    perf.append("P").append(String.format("%3d", performance)).append(",")
                            .append("H").append(String.format("%2d", histSta[0][0])).append(",")
                            .append("M").append(String.format("%2d", histSta[0][1])).append(",")
                            .append("F").append(String.format("%2d", histSta[0][2])).append(",")
                            .append("C").append(String.format("%2d", histSta[0][3])).append("\r\n");
                    if (histSta[1][0] + histSta[1][1] + histSta[1][2] + histSta[1][3] > 0) {
                        perf.append("-->R,H").append(String.format("%2d", histSta[1][0])).append(",")
                                .append("M").append(String.format("%2d", histSta[1][1])).append(",")
                                .append("F").append(String.format("%2d", histSta[1][2])).append(",")
                                .append("C").append(String.format("%2d", histSta[1][3])).append("\r\n\r\n");
                    }
                }
                final String s = perf.toString();
                try {
                    SwingUtilities.invokeAndWait(() -> {
                        txtPerf.setText(s);
                    });
                } catch (InterruptedException | InvocationTargetException ex) {
                    Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (update) {
                    try (BufferedWriter bw = new BufferedWriter(new FileWriter(statusFilePath))) {
                        bw.write(s);
                    } catch (IOException ex) {
                        Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                currSta = new int[2][4];
            }
        }

        private void updateCurrSta() {
            final StringBuilder currStaStr = new StringBuilder();
            currStaStr.append("H").append(String.format("%2d", currSta[0][0])).append("  ")
                    .append("M").append(String.format("%2d", currSta[0][1])).append("  ")
                    .append("F").append(String.format("%2d", currSta[0][2])).append("  ")
                    .append("C").append(String.format("%2d", currSta[0][3]));
            if (currSta[1][0] + currSta[1][1] + currSta[1][2] + currSta[1][3] > 0) {
                currStaStr.append("\r\nH").append(String.format("%2d", currSta[1][0])).append("  ")
                        .append("M").append(String.format("%2d", currSta[1][1])).append("  ")
                        .append("F").append(String.format("%2d", currSta[1][2])).append("  ")
                        .append("C").append(String.format("%2d", currSta[1][3]));
            }
            final String s = currStaStr.toString();
            try {
                SwingUtilities.invokeAndWait(() -> {
                    txtCurrPref.setText(s);
                });
            } catch (InterruptedException | InvocationTargetException ex) {
                Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        synchronized public void updateEvent(int[] event) {
            if (alarm) {
                alarm = false;
                try {
                    SwingUtilities.invokeAndWait(() -> {
                        if (LBPanel.getBackground().equals(Color.red)) {
                            LBPanel.setBackground(new Color(240, 240, 240));
                        }
                    });
                } catch (InterruptedException | InvocationTargetException ex) {
                    Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            updateString(evt2Str(event));

            if (lickCountFlag > 0 && event[0] - lickCountTimeCount > 1000) {
                switch (lickCountFlag) {
                    case 1:
                        lFreq = lickCount[2];
                        lFreqMax = lFreqMax < lFreq ? lFreq : lFreqMax;
                        break;
                    case 2:
                        rFreq = lickCount[3];
                        rFreqMax = rFreqMax < rFreq ? rFreq : rFreqMax;
                        break;
                }
                updateFreq();
                lickCountFlag = 0;
            }

            switch (event[2]) {
                case 0:
                    if (lickCountFlag > 0) {
                        lickCount[event[3]]++;
                    }
                    break;
                case 1:
                    if (event[1] == 0 && event[3] == 2 && event[4] == 3) {
                        updatePerf();
                        jTxtPermText.setText("");
                    } else {
                        try {
                            jTxtPermText.setText(jTxtPermText.getText() + Integer.toString(event[3]));
                        } catch (Exception e) {
                            System.out.println(e.toString());
                        }
                    }
                    break;
                case 4:
                    currSta[event[3] == 3 ? 1 : 0][2]++;//false
                    updateCurrSta();
                    break;
                case 5:
                    currSta[event[3] == 3 ? 1 : 0][3]++;//reject
                    updateCurrSta();
                    break;
                case 6:
                    currSta[event[3] == 3 ? 1 : 0][1]++;//Miss
                    updateCurrSta();
                    break;
                case 7:
                    currSta[event[3] == 3 ? 1 : 0][0]++;
                    updateCurrSta();
                    break;
                case 20:
                    if (event[3] == 1) {
                        p.writeByte((byte) 0x31);
                    }
                    break;
                case 21:
                    updatePermString(event[3]);
                    break;
                case 22://
                    lickCountFlag = event[3];
                    lickCount = new int[4];
                    lickCountTimeCount = event[0];
                    break;
                case 61:
                    if (event[3] == 0) {
                        updatePerf();
                    }
                    break;

            }
        }

        synchronized private void updateFreq() {
//            if (lFreqMax + rFreqMax == 0) {
//                return;
//            }
            freqText.setLength(0);
            freqText.append("L:").append(lFreq).append(", ").append("LMax:").append(lFreqMax)
                    .append("; ")
                    .append("R:").append(rFreq).append(", ").append("RMax:").append(rFreqMax);
            final String s = freqText.toString();
            try {
                SwingUtilities.invokeAndWait(
                        () -> {
                            jTxtLickFreq.setText(s);
                        });
            } catch (InterruptedException | InvocationTargetException ex) {
                Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        synchronized public void updateString(String str) {
            logTxt.append(str).append("\r\n");
            while (logTxt.length() > 500) {
                logTxt.delete(0, logTxt.indexOf("\r\n") + 2);
            }
            final String s = logTxt.toString();
            if (SwingUtilities.isEventDispatchThread()) {
                txtLog.setText(s);
            } else {
                try {
                    SwingUtilities.invokeAndWait(
                            () -> {
                                txtLog.setText(s);
                            });
                } catch (InterruptedException | InvocationTargetException ex) {
                    Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

        private void updatePermString(int evt) {
            final String s = eventNames.getMessage(evt);
            try {
                SwingUtilities.invokeAndWait(() -> {
                    jTxtPermText.setText(s);
                });
            } catch (InterruptedException | InvocationTargetException ex) {
                Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        private String evt2Str(int[] evt) {
            switch (evt[1]) {
                case 0x55:
                    return Integer.toString(evt[0]) + "," + ((evt[2] > 79) ? evt[2] : hName[evt[2]]) + "," + Integer.toString(evt[3]);
                case 0x00:
                    if (evt[2] == 0x01 && evt[3] == 0x02 && evt[4] == 0x03) {
                        return Integer.toString(evt[0]) + ", Manual Reset";
                    }
                case 0xff:
                    return Integer.toString(evt[0]) + ", Communication Error";
                default:
                    return "unknown";
            }
        }

        public void clearFreq() {
            lFreq = 0;
            rFreq = 0;
            rFreqMax = 0;
            lFreqMax = 0;
            SwingUtilities.invokeLater(
                    () -> {
                        jTxtLickFreq.setText("");
                    });
        }
    }

    private long getPID() {
        String processName
                = java.lang.management.ManagementFactory.getRuntimeMXBean().getName();
        return Long.parseLong(processName.split("@")[0]);
    }

    class Alarm implements Runnable {

        @Override
        public void run() {
            if (alarm) {
                try {
                    SwingUtilities.invokeAndWait(
                            () -> {
                                LBPanel.setBackground(Color.red);
                                RBPanel.setBackground(Color.red);
                                TopPanel.setBackground(Color.red);
                            });
                } catch (InterruptedException | InvocationTargetException ex) {
                    Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            alarm = true;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel LBPanel;
    private javax.swing.JPanel RBPanel;
    private javax.swing.JPanel TopPanel;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDate;
    private javax.swing.JButton btnOpen;
    private javax.swing.JButton btnRecord;
    private javax.swing.JToggleButton btnScript;
    private javax.swing.JButton btnSlash;
    private javax.swing.JButton btnStop;
    private javax.swing.JButton btnType;
    private javax.swing.JComboBox cboxCOMList;
    private javax.swing.JButton jButton0;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JButton jButtonClearLickFreq;
    private javax.swing.JButton jButtonReset;
    private javax.swing.JScrollPane jScrollFilePath;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollTxtLog;
    private javax.swing.JTextField jTxtLickFreq;
    private javax.swing.JTextField jTxtPermText;
    private javax.swing.JLabel lblEmpty;
    private javax.swing.JTextArea txtCurrPref;
    private javax.swing.JTextArea txtFileName;
    private javax.swing.JTextArea txtLog;
    private javax.swing.JTextArea txtPerf;
    // End of variables declaration//GEN-END:variables

    private final JComponent[] btnEnableGrp;
    private final JComponent[] btnDisableGrp;
    boolean alarm = false;
    ScheduledExecutorService ses;
    ScheduledFuture redBgTimerTask;
    ScriptExecutor se;
}
